package com.leshun.plc.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.leshun.plc.bean.BaseQuery;
import com.leshun.plc.bean.Pagination;
import com.leshun.plc.constant.ExceptionCodeDes;
import com.leshun.plc.dao.BaseDao;
import com.leshun.plc.service.BaseService;
import com.sls.core.socket.ServerDisponseException;

public abstract class BaseServiceImpl<T extends BaseQuery, D extends BaseDao<T>>
		implements BaseService<T> {

	@Autowired
	private D dao;

	@Override
	public List<T> queryList(T entity) {
		List<T> list = null;
		try {
			list = dao.queryList(entity);
		} catch (Exception e) {
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return list;
	}

	@Override
	public Pagination<T> queryPage(T entity) {
		Pagination<T> page = null;
		try {
			page = dao.queryPage(entity);
		} catch (Exception e) {
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return page;
	}

	@Override
	public int queryRowCount(T entity) {
		int count = 0;
		try {
			count = dao.queryRowCount(entity);
		} catch (Exception e) {
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return count;
	}

	@Override
	public boolean deleteByPrimaryKey(String id) {
		int i = 0;
		try {
			i = dao.deleteByPrimaryKey(id);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return i > 0 ? true : false;
	}

	@Override
	public boolean insert(T entity) {
		int i = 0;
		try {
			i = dao.insert(entity);
		} catch (Exception e) {
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return i > 0 ? true : false;
	}

	@Override
	public boolean insertSelective(T entity) {
		int i = 0;
		try {
			i = dao.insertSelective(entity);
		} catch (Exception e) {
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return i > 0 ? true : false;
	}

	@Override
	public T selectByPrimaryKey(String id) {
		T entity = null;
		try {
			entity = dao.selectByPrimaryKey(id);
		} catch (Exception e) {
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return entity;
	}

	@Override
	public boolean updateByPrimaryKeySelective(T entity) {
		int i = 0;
		try {
			i = dao.updateByPrimaryKeySelective(entity);
		} catch (Exception e) {
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return i > 0 ? true : false;
	}

	@Override
	public boolean updateByPrimaryKey(T entity) {
		int i = 0;
		try {
			i = dao.updateByPrimaryKey(entity);
		} catch (Exception e) {
			throw new ServerDisponseException(
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getCode(),
					ExceptionCodeDes.ACCESS_DATABASE_ERROR.getDescription());
		}
		return i > 0 ? true : false;
	}
}

package com.leshun.plc.action.business;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.leshun.plc.action.SuperAction;
import com.leshun.plc.bean.DeviceInfo;
import com.leshun.plc.bean.DeviceMsgMap;
import com.leshun.plc.comp.DeviceInfoComp;
import com.leshun.plc.comp.DeviceMsgMapComp;
import com.leshun.plc.constant.Constant;
import com.sls.core.socket.ServerDisponseException;

public class DeviceMsgMapAction
		extends SuperAction<DeviceMsgMap, DeviceMsgMapComp> {
	/**
	 * 
	 */
	private static final long serialVersionUID = 912287709833963441L;
	@Autowired
	private DeviceInfoComp deviceInfoComp;
	private List<DeviceInfo> deviceList;

	@Override
	public String list() {
		if (entity == null) {
			entity = new DeviceMsgMap();
			entity.setPageSize(Constant.INIT_PAGESIZE);
			entity.setCurrentPage(Constant.INIT_CURRENTPAGE);
		}
		try {
			page = comp.queryPage(entity);
			deviceList = deviceInfoComp.queryList(new DeviceInfo());
		} catch (Exception e) {
			log.info("4101:查询异常", e);
			addActionError(e.getMessage());
			throw new ServerDisponseException("4101:查询异常", e.getMessage());
		}
		return LIST;
	}

	@Override
	public String form() {
		try {
			if (StringUtils.isNotBlank(id)) {
				entity = comp.selectByPrimaryKey(id);
			}
		} catch (Exception e) {
			log.info("4101:查询异常", e);
			addActionError(e.getMessage());
			throw new ServerDisponseException("4101:查询异常", e.getMessage());
		}

		return "update";
	}

	@Override
	public String save() {
		boolean result = false;
		try {
			if (entity != null && StringUtils.isNotBlank(entity.getId())) {
				result = comp.updateByPrimaryKeySelective(entity);
			} else {
				result = comp.insertSelective(entity);
			}
		} catch (Exception e) {
			log.info("保存异常。", e);
			result = false;
		}

		if (!result) {
			flag = false;
			addActionError("保存失败");
		}
		redirectionUrl = "device_msg_map!list.htm";
		return SUCCESS;
	}

	@Override
	public String delete() {
		boolean result = false;
		try {
			if (StringUtils.isNotBlank(id)) {
				result = comp.deleteByPrimaryKey(id);
			}
		} catch (Exception e) {
			log.info("删除异常", e);
			result = false;
		}
		if (!result) {
			flag = false;
			message = ajaxResp(0, "删除失败");
		} else {
			message = ajaxResp(1, "操作成功");
		}
		return AJAX;
	}

	@Override
	public String detail() {
		// TODO Auto-generated method stub
		return null;
	}

	public List<DeviceInfo> getDeviceList() {
		return deviceList;
	}

	public void setDeviceList(List<DeviceInfo> deviceList) {
		this.deviceList = deviceList;
	}

}
